snippet var
	var ${1:variable} ${2:type}	
snippet pri
	fmt.Println(${1:variable})${2}
snippet spritf
	fmt.Sprintf("value is %s", ${1:variable})${2}
snippet log
	log.Printf(${1:variable}, err)${2}
snippet import
	import (
		"${1:file}";${2}
	)
# class ...
snippet class
	type ${1:ClassName} struct {
		${2:var} ${3:string}
	}
	func (${4:this} *$1) ${5:method}(${6:argument} ${7:string}) ${8:string} {
		${9:// code...}
		return this.$2
	}
snippet func
	func ${1:FunctionName}(${2:variable} ${3:string}) ${4:bool}{
		${5:// code...}
		return true
	}
snippet if
	if ${1:/* condition */} {
		${2:// code...}
	}
snippet ife
	if ${1:/* condition */} {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif ${1:/* condition */} {
		${2:// code...}
	}
snippet switch
	switch ${1:variable} {
		case ${2:value}:
			${3:// code...}
		default:
			${4:// code...}
	}${5}
snippet case
	case ${1:value}:
		${2:// code...}
snippet for
	for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {
		${4: // code...}
	}
snippet foreach
	for ${1:key}, ${2:value} := range ${3:args} {
		${4:// code...}
	}
snippet go
	go func() {
		${1:// code...}
	} ()
# ... = map[...]... {...}
snippet array
	v := [${1:2}]string{"${2:str1}", "${3:str1}"}
snippet slice
	v := []string{}
	v = append(v, "${1:string}")
snippet map
	${1:mapName} := map[${2:string}]${3:string} {
		"${4:key}": "${5:value}"
	}
	$1["$4"] = "$5"
snippet try
	defer func() {
		if r := recover(); r != nil {
			log.Printf("Runtime error caught: %v", r)
		}
	}()
